/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figcaption,figure{display:block}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}main{display:block}pre{font:1em monospace,monospace}a{background:0 0;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}code,kbd,samp{font:1em monospace,monospace}dfn{font-style:italic}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font:100%/1.15 sans-serif;margin:0}button{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;display:table;max-width:100%;padding:0;color:inherit;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}details{display:block}summary{display:list-item}menu{display:block}canvas{display:inline-block}template{display:none}[hidden]{display:none}@font-face{font-family:Montserrat;src:local("Montserrat Hairline"),local("Montserrat-Hairline"),url(../fonts/montserrat/montserrathairline.woff2) format("woff2"),url(../fonts/montserrat/montserrathairline.woff) format("woff"),url(../fonts/montserrat/montserrathairline.ttf) format("truetype");font-weight:100;font-style:normal}@font-face{font-family:Montserrat;src:local("Montserrat Light"),local("Montserrat-Light"),url(../fonts/montserrat/montserratlight.woff2) format("woff2"),url(../fonts/montserrat/montserratlight.woff) format("woff"),url(../fonts/montserrat/montserratlight.ttf) format("truetype");font-weight:300;font-style:normal}@font-face{font-family:Montserrat;src:local("Montserrat"),local("Montserrat-Regular"),url(../fonts/montserrat/montserrat.woff2) format("woff2"),url(../fonts/montserrat/montserrat.woff) format("woff"),url(../fonts/montserrat/montserrat.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:Montserrat;src:local("Montserrat Bold"),local("Montserrat-Bold"),url(../fonts/montserrat/montserratbold.woff2) format("woff2"),url(../fonts/montserrat/montserratbold.woff) format("woff"),url(../fonts/montserrat/montserratbold.ttf) format("truetype");font-weight:700;font-style:normal}@font-face{font-family:Montserrat;src:local("Montserrat Black"),local("Montserrat-Black"),url(../fonts/montserrat/montserratblack.woff2) format("woff2"),url(../fonts/montserrat/montserratblack.woff) format("woff"),url(../fonts/montserrat/montserratblack.ttf) format("truetype");font-weight:900;font-style:normal}@font-face{font-family:Rubik;src:local("Rubik"),local("Rubik-Regular"),url(../fonts/rubik/Rubik.woff2) format("woff2"),url(Rubik.woff) format("woff"),url(Rubik.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:Rubik;src:local("Rubik Medium"),local("Rubik-Medium"),url(../fonts/rubik/Rubikmedium.woff) format("woff2"),url(Rubikmedium.woff) format("woff"),url(Rubikmedium.ttf) format("truetype");font-weight:500;font-style:normal}.intro{display:flex}.intro__title{background:#faeccd;height:578px}.intro__title__content{width:56.7%;margin-left:20%}.intro__title__content p{margin-bottom:48px;max-width:370px}.intro__title__content .intro__link{letter-spacing:.3em;font-weight:800;display:flex;opacity:1;transition:opacity .4s}.intro__title__content .intro__link__mobile{display:none}.intro__title__content .intro__link:hover{opacity:.6}.intro__title__content .intro__link span{margin-left:15px}.intro__title__content .intro__link:active{opacity:1;color:#000}.intro__title__content .intro__link:active svg{opacity:1}.intro__img{background:url(../img/background.jpg) no-repeat left center/cover}@media screen and (max-width:1600px){.intro__title{height:450px}}@media screen and (max-width:768px){.intro{flex-wrap:wrap;position:relative}.intro .container__left,.intro .container__right{width:100%}.intro__title{height:auto;position:absolute;background-color:transparent;order:2;bottom:0;color:#faeccd}.intro__title a{color:#faeccd}.intro__img{order:1;width:100%;height:45vh;min-height:350px}.intro__link{display:none}.intro__link__mobile{display:inline-flex}.intro__title__content{position:absolute;bottom:15px}.intro__title__content h2{margin-bottom:10px}.intro__title__content p{margin-bottom:16px}}@media screen and (max-width:576px){.intro__title__content{padding:0 30px;width:100%;margin:0}.intro__title__content h2{line-height:36px}.intro__title__content p{max-width:unset;line-height:22.5px}.intro__title__content a{z-index:10;position:relative}.intro__title__content:after{content:'';width:100%;height:83px;position:absolute;background:linear-gradient(0,#303030 40%,rgba(48,48,48,0) 100%);left:0;bottom:-50px}}*{box-sizing:border-box}body{font:15px/1.4 Montserrat,sans-serif;position:relative;color:#303030}button,input,optgroup,select,textarea{font-family:Montserrat,sans-serif}h2{font-size:2.8em;line-height:1.2;text-transform:uppercase}h3{font-size:1.46667em;line-height:1.2}h4{font-size:1.06667em;font-weight:700;line-height:1.2;text-transform:uppercase}a{font-size:.86667em;font-weight:600;line-height:1.2;text-decoration:none;text-transform:uppercase;color:#303030}p{font-weight:300;margin-top:0}.btn{background:0 0;width:150px;height:50px;font-weight:300;border:1px solid #faeccd;font-size:1.06667em;cursor:pointer;display:flex;align-items:center;justify-content:center;position:relative;z-index:0;transition:all .4s;color:#faeccd;border-radius:4px}@media not all and (pointer:coarse){.btn:hover{color:#fff;border-color:#fff}}.btn:active{color:#f5daa5;border-color:#f5daa5;outline:0}.btn:focus{outline:0}.btn::after,.btn::before{position:absolute;background:#303030;z-index:-1;transition:1s;content:''}.btn::before{height:50px;width:117px}.btn::after{width:150px;height:22px}.header{position:absolute;width:100%;max-width:100vw;z-index:5}.header__container{padding:30px 60px 0 180px;display:flex;align-items:center}.header__menu{margin-left:auto}.container__right{width:62.5%}.container__left{width:37.5%;display:flex;flex-direction:column;align-items:start;justify-content:center}.hunting{display:flex}.hunting__info{background:#faeccd;padding-bottom:120px}.hunting__info__divider__bot,.hunting__info__divider__top{width:100%;position:relative;left:0}.hunting__info__divider__bot svg,.hunting__info__divider__top svg{width:100%;max-width:590px;height:52px}.hunting__info__item{height:265px;padding-bottom:30px;display:flex;flex-direction:column;align-items:start;justify-content:center;width:100%;max-width:370px;margin-left:20%}.hunting__info__item.second__item{position:relative;height:244px;padding:30px 0 0}.hunting__info__item.second__item p{margin-bottom:0}.hunting__item__title a{cursor:pointer;font-size:1.06667em;font-weight:700;line-height:1.2;text-transform:uppercase;margin:15px 0;transition:opacity .4s}.hunting__item__title a:hover{opacity:.6}.hunting__item__title a:active{opacity:1;color:#000}.hunting__item__title a:active svg{opacity:1;fill:#000}.hunting__item__title a svg{fill:#303030;transition:.4s}.hunting__cat{background:#303030;padding:52px 0}.hunting__cat__centred{display:flex;justify-content:center}.hunting__cat__container{max-width:1040px;width:100%;padding:0 80px 35px;margin:0 85px;border-bottom:1px solid rgba(250,236,205,.6);display:flex;flex-wrap:wrap}.hunting__cat__item{width:33.3%;display:flex;flex-direction:column;align-items:center;margin-bottom:55px;padding:24px}.hunting__cat__item__img{height:50px}.hunting__cat__item:nth-last-child(-n+2){margin-bottom:0}.hunting__cat__item__title{margin-top:10px}.hunting__cat__item__title a{color:#faeccd;text-align:center;display:flex;align-items:flex-end;font-size:1.06667em;font-weight:700;transition:.4s}.hunting__cat__item__title a:hover{color:#fff}.hunting__cat__item__title a:hover svg{fill:#fff}.hunting__cat__item__title a:active{color:#f5daa5}.hunting__cat__item__title a:active svg{fill:#f5daa5}.hunting__cat__item__title a svg{fill:#faeccd}.hunting__cat__item__title a span{margin-left:5px}.hunting .divider{width:100%;max-width:590px}.hunting .divider img{width:100%}.contact__container{max-width:1500px;width:100%;padding:0 25px;margin:0 auto}.mobile{display:none}@media screen and (max-width:1919px){.hunting .divider,.hunting__info__divider__bot,.hunting__info__divider__top{width:90%}.hunting__info__item{max-width:345px}}@media screen and (max-width:1600px){h2{font-size:2.26667em}h3{font-size:1.33333em}.hunting__cat__item__title a,.hunting__item__title a{cursor:pointer;font-size:.93333em}.hunting__info{padding-bottom:50px}.hunting__info__item{margin-left:15%;font-size:.93333em;height:220px}.hunting__info__item p{max-width:320px}.hunting__cat{padding:42px 0}.hunting__cat__item{margin-bottom:22px}.hunting__cat__container{padding:0 40px 16px;margin:0 40px}.divider,.hunting__info__divider__bot,.hunting__info__divider__top{margin-top:-7px}}@media screen and (max-width:1250px){.hunting__cat{padding:22px 0}}@media screen and (max-width:1024px){h2{font-size:1.86667em}.contact__info__details h2{margin:15px 0}.contact__info .contact__info__details ul li:nth-child(even){margin-bottom:15px}h3{line-height:1;margin:10px 0}.contact__container .contact__form{width:35%}.contact__container .contact__form form input{margin-bottom:15px}.btn{height:40px}.hunting__cat__item{padding:20px}}@media screen and (max-width:768px){.header__container{padding:15px 30px 0 30px}.hunting{flex-wrap:wrap;width:100%;background-color:#303030}.hunting__cat,.hunting__info{width:100%;margin:0 auto;padding:50px 50px 0}.hunting__cat{padding-top:0}.hunting__cat__container{justify-content:space-between;padding:0;margin:0}.hunting__cat__item{align-items:flex-start;width:50%;padding:16px 0 16px 15px;margin-bottom:10px;max-width:250px}.hunting__cat__item:nth-child(odd){padding-left:0;padding-right:15px}.hunting__info{background-color:#303030;color:#faeccd;display:flex;flex-direction:row;justify-content:space-between;align-items:flex-start}.hunting__info__item{margin-left:0;width:50%;max-width:270px;height:auto;padding-right:15px}.hunting__info__item__img{width:100%}.hunting__info__item.second__item{padding:0 0 30px 15px;height:auto}.hunting__item__title{margin:5px 0}.hunting__item__title>a{color:#faeccd}.hunting__item__title>a svg{fill:#faeccd}.hunting__item__description{color:#faeccd}.divider,.hunting__info__divider__bot,.hunting__info__divider__top{display:none}.hunting__cat__item__title a br,.hunting__item__title a br{display:none}.desktop{display:none}.mobile{display:block}}@media screen and (max-width:576px){.hunting__cat{padding:0 37px}.hunting__cat__container{border:none}.hunting__cat__item{width:100%;max-width:unset;align-items:flex-start;padding:0}.hunting__cat__item:nth-child(n){padding:0}.hunting__info{flex-wrap:wrap;padding:50px 37px 0}.hunting__info__item{width:100%;padding:0;display:flex;flex-direction:column;max-width:unset;margin-bottom:40px}.hunting__info__item.second__item{padding:0}.hunting__info__item p{max-width:unset}}.contact{background:#303030;width:100%;height:100%;padding:90px 0 0;color:#faeccd;overflow:hidden;display:flex;justify-content:center}.contact__container{display:flex;margin:0 146px 0 261px}.contact__info{display:flex;flex-direction:column;justify-content:space-between;width:26%}.contact__info .section__number{font:16.66667em/276.5px Rubik,sans-serif;margin-bottom:130px}.contact__info__details ul{padding:0}.contact__info__details ul li{list-style:none;font-weight:200}.contact__info__details ul li:nth-child(even){margin-bottom:29px}.contact__info__details h2{font-weight:300}.contact__map{width:48%;position:relative}.contact__map__mask{position:absolute;top:0;left:0;bottom:0;width:100%}.contact__map__container{width:33vw;height:calc(33vw * .77);position:relative;max-width:620px;margin:0 auto}.contact__map__container:after{background:url(../img/map.png) no-repeat 0 0/contain;content:'';position:absolute;max-width:620px;max-height:620px;top:-70px;width:100%;left:auto;bottom:-40px;right:11%}.contact__form{width:26%;display:flex;flex-direction:column;align-self:flex-end}.contact__form__title h3{font-weight:300}.contact__form form{display:flex;flex-direction:column;margin-bottom:17px}.contact__form form input,.contact__form form textarea{font-size:.93333em;font-weight:200;background:#303030;position:relative;border:none;height:25px;border-bottom:1px solid #faeccd;color:#faeccd;width:100%;margin-bottom:30px}.contact__form form input::-moz-placeholder,.contact__form form textarea::-moz-placeholder{color:#faeccd}.contact__form form input:-ms-input-placeholder,.contact__form form textarea:-ms-input-placeholder{color:#faeccd}.contact__form form input::placeholder,.contact__form form textarea::placeholder{color:#faeccd}.contact__form form input:focus,.contact__form form textarea:focus{outline:0}.contact__form form textarea{resize:none;height:100px;margin-bottom:56px}.footer{background:#303030;padding:20px 80px 40px;display:flex;justify-content:space-between}.footer__copyright{width:100%;display:flex;justify-content:center}.footer__copyright a,.footer__copyright p{color:#faeccd;font-weight:200;text-align:center;text-transform:none}.footer__copyright a{font-size:1em;transition:.4s}.footer__copyright a:hover{color:#fff}.footer__copyright a:active{color:#f5daa5}.footer__nav__aim__single{display:flex;justify-content:flex-end;align-items:center;width:20%;position:absolute;right:80px}.horizontal__nav{width:20%;display:flex;justify-content:space-between;align-items:center;transform-origin:left;transform:rotate(-90deg);position:absolute;max-width:385px}.horizontal__nav__line{border:1px solid #faeccd;width:242px;margin:0 11px 0 19px}.horizontal__nav__text{color:#faeccd;font-weight:200}.clip-svg{width:0;height:0}.clip-polygon{-webkit-clip-path:url(#clip-svg-demo);clip-path:url(#clip-svg-demo)}#map{position:relative;z-index:2;width:33vw;height:calc(33vw * .77);max-width:620px;max-height:492px;left:0;top:0}@media screen and (max-width:1919px){.contact__container{max-width:1400px;padding:0 50px;margin:0 147px 0 261px}.contact__info{width:40%}.contact__info .section__number{margin-bottom:100px;font-size:13.33333em}.horizontal__nav{width:25%}.contact__map{margin-top:30px}.contact__map__container:after{top:-67px}}@media screen and (min-width:1950px){#map{left:2%;top:2%}}@media screen and (max-width:1680px){#map,.contact__map__container{width:31vw;height:calc(31vw * .77)}#map:after,.contact__map__container:after{right:13%}.horizontal__nav{width:auto}}@media screen and (max-width:1440px){#map,.contact__map__container{width:32vw;height:calc(32vw * .77)}.contact__map__container:after{top:-18%}.contact__container{max-width:1200px;padding:0 50px;margin:0 80px 0 160px}.contact__info .section__number{margin-bottom:100px;font-size:10.66667em}}@media screen and (max-width:1250px){.contact__container{max-width:980px;padding:0 60px 0 110px;margin:0 auto}.contact__info .section__number{margin-bottom:50px;font-size:9.33333em}.intro__title{height:400px}.intro__title__content{width:72.7%;margin-left:15%}}@media screen and (max-width:1024px){.contact{padding:60px 0 0}.contact__container{padding:0 40px 0 90px}.horizontal__nav{left:40px}.contact__info .section__number{margin-bottom:50px;font-size:6.66667em}.footer__nav__aim__single{right:30px}}@media screen and (max-width:768px){.contact{padding:0}.contact__container{padding:0 40px 0 70px;flex-wrap:wrap}.contact__map__mask{top:80px;left:52px}.contact__info .section__number{font-size:4.66667em;margin-bottom:-85px}.contact__container .contact__form{width:75%}.contact__container .contact__form form textarea{margin-bottom:25px}#map,.contact__map__container{width:42vw;height:calc(42vw * .77)}.horizontal__nav{left:30px}.footer{padding:20px}}@media screen and (max-width:576px){.contact{padding-top:100px;padding-bottom:0}.contact__info{width:100%;order:1}.contact__info .section__number{margin:0;padding:0;line-height:1.5}.contact__form{order:2}.contact__map{order:3;width:100%}.contact__map__container{width:100vw;height:400px;max-width:unset;margin-left:-30px}.contact__map__container:after{content:none}.contact__map__mask{position:relative;top:0;left:0}.contact__container{padding:0 30px}.contact__form,.footer,.section__number{display:none}#map{position:absolute;top:0;left:-50vw;right:-50vw;width:200vw;height:150vw;max-width:unset;max-height:unset;-webkit-clip-path:none;clip-path:none;border-radius:50%}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
